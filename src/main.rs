#![doc = include_str!("../README.md")]

use database_actor::DatabaseActor;
use image_actor::ImageActor;
use rocket::State;
use sailfish::TemplateOnce;
use templates::SailfishResponder;

mod configuration;
mod database_actor;
mod image_actor;
mod templates;

mod models;
// Module automatically generated by diesel, so we can't do anything about the
// linter warnings
#[allow(clippy::missing_docs_in_private_items)]
#[allow(unused_qualifications)]
mod schema;

/// Returns Hello World
#[rocket::get("/")]
fn index(rng: &State<ImageActor>) -> SailfishResponder {
    let template = templates::index::IndexTemplate {
        images: vec![rng.get(), rng.get(), rng.get()],
    };
    SailfishResponder(
        template.render_once().expect("Failed to render template"),
    )
}

/// Start the rocket server
#[rocket::main]
#[allow(clippy::redundant_type_annotations)]
async fn main() {
    let database_actor = DatabaseActor::new();
    let rocket = rocket::build()
        .manage(ImageActor::new(&database_actor))
        .mount("/", rocket::routes![index]);
    rocket.launch().await.expect("Server Crashed");
}
